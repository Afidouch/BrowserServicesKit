From 7f172f6230f81987ebbdcd39b74adb42f3b01e53 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Wed, 2 Feb 2022 13:05:19 +0000
Subject: [PATCH] Make tooltips data driven

---
 src/DeviceInterface/AppleDeviceInterface.js |  33 ++++-
 src/DeviceInterface/InterfacePrototype.js   |  18 ++-
 src/Form/Form.js                            |   2 +-
 src/Form/inputStyles.js                     |   2 +-
 src/Form/inputTypeConfig.js                 |  21 ++-
 src/UI/DataAutofill.js                      |  10 +-
 src/UI/EmailAutofill.js                     |   4 +-
 src/UI/Tooltip.js                           | 145 +++++++++-----------
 src/topAutofill.js                          |   1 +
 9 files changed, 132 insertions(+), 104 deletions(-)

diff --git a/src/DeviceInterface/AppleDeviceInterface.js b/src/DeviceInterface/AppleDeviceInterface.js
index cda7949..dcb9a2b 100644
--- a/src/DeviceInterface/AppleDeviceInterface.js
+++ b/src/DeviceInterface/AppleDeviceInterface.js
@@ -9,7 +9,7 @@ const {
 const EmailAutofill = require('../UI/EmailAutofill')
 const DataAutofill = require('../UI/DataAutofill')
 const {scanForInputs, forms} = require('../scanForInputs.js')
-const getInputConfig = require('../Form/inputTypeConfig')
+const {getInputConfigFromType} = require('../Form/inputTypeConfig')
 let currentAttached = {}
 
 document.addEventListener('InboundCredential', function (e) {
@@ -77,6 +77,7 @@ class AppleDeviceInterface extends InterfacePrototype {
         return [...forms.values()].find((form) => form.tooltip)
     }
 
+/* TODO remove if data patch works
     setActiveForm (input, form) {
         currentAttached.form = form
         currentAttached.input = input
@@ -89,12 +90,31 @@ class AppleDeviceInterface extends InterfacePrototype {
         window.addEventListener('pointerdown', form.removeTooltip, {capture: true})
         window.addEventListener('input', form.removeTooltip, {once: true})
     }
+*/
+    async setActiveForm (input, form) {
+        currentAttached.form = form
+        currentAttached.input = input
+        form.activeInput = input
+
+        const inputType = await this.getInputType()
+        const subtype = await this.getInputSubtype()
+        const config = getInputConfigFromType(inputType)
+        const position = isApp ? input.getBoundingClientRect()
+            : getDaxBoundingBox(input)
+
+        form.tooltip = inputType === 'emailNew'
+            ? new EmailAutofill(config, subtype, position, this)
+            : new DataAutofill(config, subtype, position, this)
+        form.intObs.observe(input)
+        window.addEventListener('pointerdown', form.removeTooltip, {capture: true})
+        window.addEventListener('input', form.removeTooltip, {once: true})
+    }
 
     async setSize (details) {
         await wkSend('setSize', details)
     }
 
-    async showTooltip (form, input, inputType, e) {
+    async showTooltip (form, input, inputType, inputSubtype, e) {
         if (e.type !== 'pointerdown') {
             return
         }
@@ -116,7 +136,8 @@ class AppleDeviceInterface extends InterfacePrototype {
             inputWidth: Math.floor(inputClientDimensions.width),
             // inputTop: inputTop,
             // inputLeft: inputLeft,
-            inputType: inputType
+            inputType: inputType,
+            inputSubtype: inputSubtype,
         }
         currentAttached = {form, input}
 
@@ -217,6 +238,12 @@ class AppleDeviceInterface extends InterfacePrototype {
         return inputType
     }
 
+    // TODO consolidate with the above
+    async getInputSubtype () {
+        const {inputSubtype} = await wkSendAndWait('emailHandlerCheckAppSignedInStatus')
+        return inputSubtype
+    }
+
     async getAlias () {
         const {alias} = await wkSendAndWait(
             'emailHandlerGetAlias',
diff --git a/src/DeviceInterface/InterfacePrototype.js b/src/DeviceInterface/InterfacePrototype.js
index 6b19236..c3df367 100644
--- a/src/DeviceInterface/InterfacePrototype.js
+++ b/src/DeviceInterface/InterfacePrototype.js
@@ -15,6 +15,8 @@ const {
 } = require('../Form/formatters')
 const EmailAutofill = require('../UI/EmailAutofill')
 const DataAutofill = require('../UI/DataAutofill')
+const {getInputConfig} = require('../Form/inputTypeConfig')
+const {getInputSubtype} = require('../Form/input-classifiers')
 
 let attempts = 0
 
@@ -144,9 +146,10 @@ class InterfacePrototype {
     attachTooltip (form, input, e) {
         form.activeInput = input
 
+        const subtype = getInputSubtype(input)
         if (!isTopFrame) {
             const inputType = getInputMainType(input)
-            this.showTooltip(form, input, inputType, e)
+            this.showTooltip(form, input, inputType, subtype, e)
             return
         }
 
@@ -158,9 +161,16 @@ class InterfacePrototype {
         } else {
             if (form.tooltip) return
 
-            form.tooltip = !isApp
-                ? new EmailAutofill(input, form, this)
-                : new DataAutofill(input, form, this)
+            const config = getInputConfig(input)
+
+            // In extensions, the tooltip is centered on the Dax icon
+            const position = isApp ? input.getBoundingClientRect()
+                : getDaxBoundingBox(input)
+            // TODO check if we should pass in a position function instead to measure the current input position.
+
+            form.tooltip = isApp
+                ? new DataAutofill(config, subtype, position, this)
+                : new EmailAutofill(config, subtype, position, this)
             form.intObs.observe(input)
             window.addEventListener('pointerdown', form.removeTooltip, {capture: true})
             window.addEventListener('input', form.removeTooltip, {once: true})
diff --git a/src/Form/Form.js b/src/Form/Form.js
index 92a5861..641ce6c 100644
--- a/src/Form/Form.js
+++ b/src/Form/Form.js
@@ -4,7 +4,7 @@ const {addInlineStyles, removeInlineStyles, setValue, isEventWithinDax, isMobile
 const {getInputSubtype, setInputType, getInputMainType} = require('./input-classifiers')
 const {getIconStylesAutofilled, getIconStylesBase} = require('./inputStyles')
 const {ATTR_AUTOFILL} = require('../constants')
-const getInputConfig = require('./inputTypeConfig.js')
+const {getInputConfig} = require('./inputTypeConfig.js')
 const {getUnifiedExpiryDate, formatCCYear, getCountryName} = require('./formatters')
 
 class Form {
diff --git a/src/Form/inputStyles.js b/src/Form/inputStyles.js
index 9577e3b..e41e5c3 100644
--- a/src/Form/inputStyles.js
+++ b/src/Form/inputStyles.js
@@ -1,4 +1,4 @@
-const getInputConfig = require('./inputTypeConfig.js')
+const {getInputConfig} = require('./inputTypeConfig.js')
 
 /**
  * Returns the css-ready base64 encoding of the icon for the given input
diff --git a/src/Form/inputTypeConfig.js b/src/Form/inputTypeConfig.js
index 06e1a3b..e64b809 100644
--- a/src/Form/inputTypeConfig.js
+++ b/src/Form/inputTypeConfig.js
@@ -47,7 +47,7 @@ const inputTypeConfig = {
         getIconFilled: () => ddgPasswordIcons.ddgPasswordIconFilled,
         shouldDecorate: (_input, {isLogin, device}) => isLogin && device.hasLocalCredentials,
         dataType: 'Credentials',
-        displayTitlePropName: (_input, data) => data.username,
+        displayTitlePropName: (_subtype, data) => data.username,
         displaySubtitlePropName: '•••••••••••••••',
         autofillMethod: 'getAutofillCredentials'
     },
@@ -57,7 +57,7 @@ const inputTypeConfig = {
         getIconFilled: () => '',
         shouldDecorate: (_input, {device}) => device.hasLocalCreditCards,
         dataType: 'CreditCards',
-        displayTitlePropName: (_input, data) => data.title,
+        displayTitlePropName: (_subtype, data) => data.title,
         displaySubtitlePropName: 'displayNumber',
         autofillMethod: 'getAutofillCreditCard'
     },
@@ -70,8 +70,7 @@ const inputTypeConfig = {
             return device.getLocalIdentities()?.some((identity) => !!identity[subtype])
         },
         dataType: 'Identities',
-        displayTitlePropName: (input, data) => {
-            const subtype = getInputSubtype(input)
+        displayTitlePropName: (subtype, data) => {
             if (subtype === 'addressCountryCode') {
                 return getCountryDisplayName('en', data.addressCountryCode)
             }
@@ -99,7 +98,19 @@ const inputTypeConfig = {
  */
 const getInputConfig = (input) => {
     const inputType = getInputMainType(input)
+    return getInputConfigFromType(inputType)
+}
+
+/**
+ * Retrieves configs from an input type
+ * @param {string} inputType
+ * @returns {InputTypeConfig}
+ */
+const getInputConfigFromType = (inputType) => {
     return inputTypeConfig[inputType || 'unknown']
 }
 
-module.exports = getInputConfig
+module.exports = {
+    getInputConfig,
+    getInputConfigFromType
+}
diff --git a/src/UI/DataAutofill.js b/src/UI/DataAutofill.js
index 3ad1c89..b75a00c 100644
--- a/src/UI/DataAutofill.js
+++ b/src/UI/DataAutofill.js
@@ -4,15 +4,11 @@ const {
     escapeXML
 } = require('../autofill-utils')
 const Tooltip = require('./Tooltip')
-const getInputConfig = require('../Form/inputTypeConfig')
-const {getInputSubtype} = require('../Form/input-classifiers')
 
 class DataAutofill extends Tooltip {
-    constructor (input, associatedForm, deviceInterface) {
-        super(input, associatedForm, deviceInterface)
+    constructor (config, subtype, position, deviceInterface) {
+        super(config, subtype, position, deviceInterface)
 
-        const config = getInputConfig(input)
-        const subtype = getInputSubtype(input)
         this.config = config
 
         this.data = this.interface[`getLocal${config.dataType}`]()
@@ -49,7 +45,7 @@ ${includeStyles}
                 <span class="tooltip__button__text-container">
                     <span class="tooltip__button__primary-text">
 ${singleData.id === 'privateAddress' ? 'Generated Private Address\n' : ''}
-${escapeXML(config.displayTitlePropName(input, singleData))}
+${escapeXML(config.displayTitlePropName(subtype, singleData))}
                     </span><br />
                     <span class="tooltip__button__secondary-text">
 ${escapeXML(singleData[config.displaySubtitlePropName] || config.displaySubtitlePropName)}
diff --git a/src/UI/EmailAutofill.js b/src/UI/EmailAutofill.js
index 918d3f3..a3d5c7f 100644
--- a/src/UI/EmailAutofill.js
+++ b/src/UI/EmailAutofill.js
@@ -7,8 +7,8 @@ const {
 const Tooltip = require('./Tooltip')
 
 class EmailAutofill extends Tooltip {
-    constructor (input, associatedForm, deviceInterface) {
-        super(input, associatedForm, deviceInterface)
+    constructor (config, subtype, position, deviceInterface) {
+        super(config, subtype, position, deviceInterface)
 
         this.addresses = this.interface.getLocalAddresses()
 
diff --git a/src/UI/Tooltip.js b/src/UI/Tooltip.js
index 487a90d..6162eb9 100644
--- a/src/UI/Tooltip.js
+++ b/src/UI/Tooltip.js
@@ -1,82 +1,11 @@
 const {safeExecute, addInlineStyles, getDaxBoundingBox, isApp, isTopFrame} = require('../autofill-utils')
 
-/**
- * @this {Tooltip}
- */
-const updatePosition = function ({left, top}) {
-    const shadow = this.shadow
-    // If the stylesheet is not loaded wait for load (Chrome bug)
-    if (!shadow.styleSheets.length) {
-        this.stylesheet?.addEventListener('load', this.checkPosition)
-        return
-    }
-
-    this.left = left
-    this.top = top
-
-    if (this.transformRuleIndex && shadow.styleSheets[0].rules[this.transformRuleIndex]) {
-        // If we have already set the rule, remove it…
-        shadow.styleSheets[0].deleteRule(this.transformRuleIndex)
-    } else {
-        // …otherwise, set the index as the very last rule
-        this.transformRuleIndex = shadow.styleSheets[0].rules.length
-    }
-
-    let newRule = `.wrapper {transform: translate(${left}px, ${top}px);}`
-    if (isTopFrame) {
-        newRule = '.wrapper {transform: none; }'
-    }
-    shadow.styleSheets[0].insertRule(newRule, this.transformRuleIndex)
-}
-
-/**
- * @this {Tooltip}
- */
-const checkPosition = function () {
-    if (this.animationFrame) {
-        window.cancelAnimationFrame(this.animationFrame)
-    }
-
-    this.animationFrame = window.requestAnimationFrame(() => {
-        // In extensions, the tooltip is centered on the Dax icon
-        const position = isApp ? this.input.getBoundingClientRect()
-            : getDaxBoundingBox(this.input)
-        const {left, bottom} = position
-
-        if (left !== this.left || bottom !== this.top) {
-            this.updatePosition({left, top: bottom})
-        }
-
-        this.animationFrame = null
-    })
-}
-
-/**
- * @this {Tooltip}
- */
-const ensureIsLastInDOM = function () {
-    this.count = this.count || 0
-    // If DDG el is not the last in the doc, move it there
-    if (document.body.lastElementChild !== this.host) {
-        // Try up to 15 times to avoid infinite loop in case someone is doing the same
-        if (this.count < 15) {
-            this.lift()
-            this.append()
-            this.checkPosition()
-            this.count++
-        } else {
-            // Remove the tooltip from the form to cleanup listeners and observers
-            this.associatedForm.removeTooltip()
-            console.info(`DDG autofill bailing out`)
-        }
-    }
-}
-
 class Tooltip {
-    constructor (input, associatedForm, deviceInterface) {
+    constructor (config, subtype, position, deviceInterface) {
         this.shadow = document.createElement('ddg-autofill').attachShadow({mode: 'closed'})
         this.host = this.shadow.host
         this.tooltip = null
+        this.position = position
         const forcedVisibilityStyles = {
             'display': 'block',
             'visibility': 'visible',
@@ -84,8 +13,8 @@ class Tooltip {
         }
         // @ts-ignore how to narrow this.host to HTMLElement?
         addInlineStyles(this.host, forcedVisibilityStyles)
-        this.input = input
-        this.associatedForm = associatedForm
+
+        this.associatedForm = /* associatedForm ||*/ null // TODO fix
         this.interface = deviceInterface
         this.count = 0
     }
@@ -93,7 +22,7 @@ class Tooltip {
         document.body.appendChild(this.host)
     }
     remove () {
-        window.removeEventListener('scroll', this.checkPosition, {capture: true})
+        window.removeEventListener('scroll', () => this.checkPosition(), {capture: true})
         this.resObs.disconnect()
         this.mutObs.disconnect()
         this.lift()
@@ -103,10 +32,64 @@ class Tooltip {
         this.top = null
         document.body.removeChild(this.host)
     }
-    checkPosition = checkPosition.bind(this)
-    updatePosition = updatePosition.bind(this)
-    ensureIsLastInDOM = ensureIsLastInDOM.bind(this)
-    resObs = new ResizeObserver(entries => entries.forEach(this.checkPosition))
+    checkPosition () {
+        if (this.animationFrame) {
+            window.cancelAnimationFrame(this.animationFrame)
+        }
+
+        this.animationFrame = window.requestAnimationFrame(() => {
+            const {left, bottom} = this.position
+
+            if (left !== this.left || bottom !== this.top) {
+                this.updatePosition({left, top: bottom})
+            }
+
+            this.animationFrame = null
+        })
+    }
+    updatePosition ({left, top}) {
+        const shadow = this.shadow
+        // If the stylesheet is not loaded wait for load (Chrome bug)
+        if (!shadow.styleSheets.length) {
+            this.stylesheet?.addEventListener('load', () => this.checkPosition())
+            return
+        }
+
+        this.left = left
+        this.top = top
+
+        if (this.transformRuleIndex && shadow.styleSheets[0].rules[this.transformRuleIndex]) {
+            // If we have already set the rule, remove it…
+            shadow.styleSheets[0].deleteRule(this.transformRuleIndex)
+        } else {
+            // …otherwise, set the index as the very last rule
+            this.transformRuleIndex = shadow.styleSheets[0].rules.length
+        }
+
+        let newRule = `.wrapper {transform: translate(${left}px, ${top}px);}`
+        if (isTopFrame) {
+            newRule = '.wrapper {transform: none; }'
+        }
+        shadow.styleSheets[0].insertRule(newRule, this.transformRuleIndex)
+    }
+    ensureIsLastInDOM () {
+        this.count = this.count || 0
+        // If DDG el is not the last in the doc, move it there
+        if (document.body.lastElementChild !== this.host) {
+            // Try up to 15 times to avoid infinite loop in case someone is doing the same
+            if (this.count < 15) {
+                this.lift()
+                this.append()
+                this.checkPosition()
+                this.count++
+            } else {
+                // Remove the tooltip from the form to cleanup listeners and observers
+                this.associatedForm.removeTooltip()
+                console.info(`DDG autofill bailing out`)
+            }
+        }
+    }
+    resObs = new ResizeObserver(entries => entries.forEach(() => this.checkPosition()))
     mutObs = new MutationObserver((mutationList) => {
         for (const mutationRecord of mutationList) {
             if (mutationRecord.type === 'childList') {
@@ -157,7 +140,7 @@ class Tooltip {
         this.append()
         this.resObs.observe(document.body)
         this.mutObs.observe(document.body, {childList: true, subtree: true, attributes: true})
-        window.addEventListener('scroll', this.checkPosition, {capture: true})
+        window.addEventListener('scroll', () => this.checkPosition(), {capture: true})
         this.setSize()
 
         // TODO Not ideal, we wait till after the form is filled.
diff --git a/src/topAutofill.js b/src/topAutofill.js
index 0beb05a..e211be3 100644
--- a/src/topAutofill.js
+++ b/src/topAutofill.js
@@ -38,6 +38,7 @@ function setupFakeForm (inputType) {
 async function init () {
     const DeviceInterface = require('./DeviceInterface')
     const inputType = await DeviceInterface.getInputType()
+    const inputSubtype = await DeviceInterface.getInputSubtype()
     const {fakeInput, fakeForm} = setupFakeForm(inputType)
     function triggerFormSetup () {
         const {getOrCreateParentFormInstance} = require('./scanForInputs')
-- 
2.32.0 (Apple Git-132)

