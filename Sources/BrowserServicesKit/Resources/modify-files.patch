From 618177c59f42dcb2ce3b7ae944320bbc30be0104 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Fri, 12 Nov 2021 19:48:37 +0000
Subject: [PATCH 01/11] PoC top autofill

---
 Gruntfile.js                             |   9 +-
 src/DeviceInterface.js                   | 129 +++++++++++++++++++++--
 src/Form/Form.js                         |   2 +-
 src/Form/listenForFormSubmission.js      |   1 -
 src/TopAutofill.html                     |  13 +++
 src/UI/DataAutofill.js                   |   6 +-
 src/UI/EmailAutofill.js                  |  27 ++++-
 src/UI/styles/autofill-tooltip-styles.js |   8 +-
 src/appleDeviceUtils/appleDeviceUtils.js |   7 +-
 src/autofill-utils.js                    |  12 ++-
 src/autofill.js                          |  55 +++-------
 src/init.js                              |  41 +++++++
 src/scanForInputs.js                     |  28 ++++-
 src/topAutofill.js                       |  51 +++++++++
 14 files changed, 314 insertions(+), 75 deletions(-)
 create mode 100644 src/TopAutofill.html
 create mode 100644 src/init.js
 create mode 100644 src/topAutofill.js

diff --git a/Gruntfile.js b/Gruntfile.js
index 7f2e80e..815b23a 100644
--- a/Gruntfile.js
+++ b/Gruntfile.js
@@ -16,7 +16,8 @@ module.exports = function (grunt) {
                     ]
                 },
                 files: {
-                    'dist/autofill.js': ['src/autofill.js']
+                    'dist/autofill.js': ['src/autofill.js'],
+                    'dist/topAutofill.js': ['src/topAutofill.js']
                 }
             }
         },
@@ -29,6 +30,7 @@ module.exports = function (grunt) {
         exec: {
             copyAutofillStylesToCSS: 'cp src/UI/styles/autofill-tooltip-styles.js dist/autofill.css && sed -i "" \'/`/d\' dist/autofill.css',
             copyHostStyles: 'cp src/UI/styles/autofill-host-styles.css dist/autofill-host-styles_chrome.css && cp src/UI/styles/autofill-host-styles.css dist/autofill-host-styles_firefox.css',
+            copyHtml: 'cp src/TopAutofill.html dist/TopAutofill.html',
             // Firefox and Chrome treat relative url differently in injected scripts. This fixes it.
             updateFirefoxRelativeUrl: `sed -i "" "s/chrome-extension:\\/\\/__MSG_@@extension_id__\\/public/../g" dist/autofill-host-styles_firefox.css`
         },
@@ -41,6 +43,10 @@ module.exports = function (grunt) {
                 files: ['src/**/*.js'],
                 tasks: ['browserify']
             },
+            html: {
+                files: ['src/**/*.html'],
+                tasks: ['exec:copyHtml']
+            },
             styles: {
                 files: ['src/**/*.css', 'src/UI/styles/*'],
                 tasks: ['exec:copyAutofillStylesToCSS', 'exec:copyHostStyles', 'exec:updateFirefoxRelativeUrl']
@@ -51,6 +57,7 @@ module.exports = function (grunt) {
     grunt.registerTask('default', [
         'eslint',
         'browserify',
+        'exec:copyHtml',
         'exec:copyAutofillStylesToCSS',
         'exec:copyHostStyles',
         'exec:updateFirefoxRelativeUrl'
diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index 65dce1c..1bb9bb5 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -1,19 +1,70 @@
 const EmailAutofill = require('./UI/EmailAutofill')
 const DataAutofill = require('./UI/DataAutofill')
 const {
-    isApp, notifyWebApp, isDDGApp, isAndroid,
-    isDDGDomain, sendAndWaitForAnswer, setValue,
-    formatDuckAddress, isMobileApp, ADDRESS_DOMAIN
+    isApp,
+    isTopFrame,
+    notifyWebApp,
+    isDDGApp,
+    isAndroid,
+    isDDGDomain,
+    sendAndWaitForAnswer,
+    setValue,
+    formatDuckAddress,
+    isMobileApp,
+    getDaxBoundingBox,
+    ADDRESS_DOMAIN
 } = require('./autofill-utils')
 const {wkSend, wkSendAndWait} = require('./appleDeviceUtils/appleDeviceUtils')
 const {scanForInputs, forms} = require('./scanForInputs.js')
 const {formatFullName} = require('./Form/formatters')
+const getInputConfig = require('./Form/inputTypeConfig')
 
 const SIGN_IN_MSG = { signMeIn: true }
 
-const attachTooltip = function (form, input) {
+let currentAttached = {}
+const attachTooltip = function (form, input, e) {
+    if (!isTopFrame) {
+        let dimensions = getDaxBoundingBox(input)
+        const inputClientDimensions = input.getBoundingClientRect()
+        console.log(dimensions, e, input, inputClientDimensions)
+        // TODO check screenX/Y is correct over clientX, layerX, etc
+        let diffX = Math.floor(e.x - dimensions.x)
+        let diffY = Math.floor(e.y - dimensions.y)
+        const inputLeft = Math.floor(/* e.x - */inputClientDimensions.x/* - window.scrollX */)
+        const inputTop = Math.floor(/* e.y - */inputClientDimensions.y/* - window.scrollY */)
+
+        /*
+        const red = document.createElement("div");
+        //const calcTop = e.pageY + inputTop;
+        const calcTop = inputTop;
+        //const calcLeft = e.pageX - inputLeft;
+        const calcLeft = inputLeft;
+        red.style = `
+            background:red;
+            display: block;
+            height: ${inputClientDimensions.height}px;
+            width: ${inputClientDimensions.width}px;
+            position: absolute;
+            top: ${calcTop}px;
+            left: ${calcLeft}px;
+        `
+        document.body.appendChild(red)
+        */
+
+        DeviceInterface.showTooltip({
+            top: String(diffY),
+            left: String(diffX),
+            height: String(dimensions.height),
+            width: String(dimensions.width),
+            inputHeight: String(Math.floor(inputClientDimensions.height)),
+            inputWidth: String(Math.floor(inputClientDimensions.width)),
+            inputTop: String(inputTop),
+            inputLeft: String(inputLeft)
+        })
+        currentAttached = {form, input}
+    }
     form.activeInput = input
-
+    // TODO get working again
     if (isMobileApp) {
         this.getAlias().then((alias) => {
             if (alias) form.autofillEmail(alias)
@@ -31,6 +82,11 @@ const attachTooltip = function (form, input) {
     }
 }
 
+document.addEventListener('InboundCredential', function (e) {
+    console.log('inbound', e)
+    currentAttached.form.autofillEmail(e.detail.credential)
+})
+
 let attempts = 0
 
 class InterfacePrototype {
@@ -137,6 +193,8 @@ class InterfacePrototype {
         const start = () => {
             this.addDeviceListeners()
             this.setupAutofill()
+            const event = new CustomEvent('InitComplete', {})
+            window.dispatchEvent(event)
         }
         if (document.readyState === 'complete') {
             start()
@@ -144,6 +202,10 @@ class InterfacePrototype {
             window.addEventListener('load', start)
         }
     }
+    getActiveForm () {
+        return [...forms.values()].find((form) => form.tooltip)
+    }
+    setActiveForm () {}
     setupAutofill () {}
     getAddresses () {}
     refreshAlias () {}
@@ -295,13 +357,13 @@ class AppleDeviceInterface extends InterfacePrototype {
                 notifyWebApp({isApp})
             }
 
-            if (isApp) {
+            if (isApp && !isTopFrame) {
                 await this.getAutofillInitData()
             }
 
             const signedIn = await this._checkDeviceSignedIn()
             if (signedIn) {
-                if (isApp) {
+                if (isApp && !isTopFrame) {
                     await this.getAddresses()
                 }
                 notifyWebApp({ deviceSignedIn: {value: true, shouldLog} })
@@ -313,6 +375,33 @@ class AppleDeviceInterface extends InterfacePrototype {
             scanForInputs(this)
         }
 
+        this.getActiveForm = () => {
+            if (currentAttached.form) return currentAttached.form
+            return [...forms.values()].find((form) => form.tooltip)
+        }
+        // TODO
+        this.setActiveForm = (input, form) => {
+            currentAttached.form = form
+            currentAttached.input = input
+            form.activeInput = input
+            console.log('got here, the following needs to load at the right moment')
+            const inputType = getInputConfig(input).type
+            form.tooltip = inputType === 'emailNew'
+                ? new EmailAutofill(input, form, this)
+                : new DataAutofill(input, form, this)
+            form.intObs.observe(input)
+            window.addEventListener('pointerdown', form.removeTooltip, {capture: true})
+            window.addEventListener('input', form.removeTooltip, {once: true})
+        }
+
+        this.showTooltip = async (details) => {
+            await wkSend('showAutofillParent', details)
+        }
+
+        this.closeTooltip = async () => {
+            await wkSend('closeAutofillParent', {})
+        }
+
         this.getAddresses = async () => {
             if (!isApp) return this.getAlias()
 
@@ -362,12 +451,13 @@ class AppleDeviceInterface extends InterfacePrototype {
          * Gets the init data from the device
          * @returns {APIResponse<PMData>}
          */
-        this.getAutofillInitData = () =>
-            wkSendAndWait('pmHandlerGetAutofillInitData')
+        this.getAutofillInitData = () => {
+            return wkSendAndWait('pmHandlerGetAutofillInitData')
                 .then((response) => {
                     this.storeLocalData(response.success)
                     return response
                 })
+        }
 
         /**
          * Gets credentials ready for autofill
@@ -410,6 +500,27 @@ class AppleDeviceInterface extends InterfacePrototype {
         this.getAutofillCreditCard = (id) =>
             wkSendAndWait('pmHandlerGetCreditCard', { id })
     }
+    #dataApple = {
+        credentials: false,
+        creditCards: false,
+        identities: false
+    }
+
+    storeLocalData (data) {
+        if (isTopFrame) {
+            return DeviceInterface.storeLocalData.apply(this, arguments)
+        }
+        this.#dataApple = data
+    }
+    get hasLocalCredentials () {
+        return this.#dataApple.credentials
+    }
+    get hasLocalIdentities () {
+        return this.#dataApple.identities
+    }
+    get hasLocalCreditCards () {
+        return this.#dataApple.creditCards
+    }
 }
 
 const DeviceInterface = (() => {
diff --git a/src/Form/Form.js b/src/Form/Form.js
index 7647fd0..2b5ef26 100644
--- a/src/Form/Form.js
+++ b/src/Form/Form.js
@@ -225,7 +225,7 @@ class Form {
                 }
 
                 this.touched.add(e.target)
-                this.attachTooltip(this, e.target)
+                this.attachTooltip(this, e.target, e)
             }
         }
 
diff --git a/src/Form/listenForFormSubmission.js b/src/Form/listenForFormSubmission.js
index 3dc9918..029c5bf 100644
--- a/src/Form/listenForFormSubmission.js
+++ b/src/Form/listenForFormSubmission.js
@@ -1,6 +1,5 @@
 const {forms} = require('../scanForInputs')
 const isApp = require('../autofill-utils')
-
 const listenForGlobalFormSubmission = () => {
     if (!isApp) return
 
diff --git a/src/TopAutofill.html b/src/TopAutofill.html
new file mode 100644
index 0000000..212afbd
--- /dev/null
+++ b/src/TopAutofill.html
@@ -0,0 +1,13 @@
+<html>
+<head>
+<style>
+    html, body {
+        background-color:transparent;
+        margin: 5px;
+    }
+</style>
+</head>
+<body>
+  <main></main>
+</body>
+</html>
diff --git a/src/UI/DataAutofill.js b/src/UI/DataAutofill.js
index 247e579..8627bba 100644
--- a/src/UI/DataAutofill.js
+++ b/src/UI/DataAutofill.js
@@ -32,9 +32,13 @@ class DataAutofill extends Tooltip {
             return shouldShow
         }
 
+        // TODO
+        const isDesktop = true
+        const desktopClass = isDesktop ? 'desktop' : ''
+
         this.shadow.innerHTML = `
 ${includeStyles}
-<div class="wrapper wrapper--data">
+<div class="wrapper wrapper--data ${desktopClass}">
     <div class="tooltip tooltip--data" hidden>
         ${this.data.map((singleData) => `
             ${shouldShowSeparator(singleData.id) ? '<hr />' : ''}
diff --git a/src/UI/EmailAutofill.js b/src/UI/EmailAutofill.js
index d5b2950..53be8c5 100644
--- a/src/UI/EmailAutofill.js
+++ b/src/UI/EmailAutofill.js
@@ -1,8 +1,12 @@
 const {
     isApp,
     formatDuckAddress,
-    escapeXML
+    escapeXML,
+    isTopFrame
 } = require('../autofill-utils')
+const {
+    wkSend
+} = require('../appleDeviceUtils/appleDeviceUtils')
 const Tooltip = require('./Tooltip')
 
 class EmailAutofill extends Tooltip {
@@ -15,10 +19,14 @@ class EmailAutofill extends Tooltip {
             ? `<style>${require('./styles/autofill-tooltip-styles.js')}</style>`
             : `<link rel="stylesheet" href="${chrome.runtime.getURL('public/css/autofill.css')}" crossorigin="anonymous">`
 
+        // TODO
+        const isDesktop = true
+        const desktopClass = isDesktop ? 'desktop' : ''
+
         this.shadow.innerHTML = `
 ${includeStyles}
-<div class="wrapper wrapper--email">
-    <div class="tooltip tooltip--email" hidden>
+<div class="wrapper wrapper--email ${desktopClass}">
+    <div class="tooltip tooltip--data" hidden>
         <button class="tooltip__button tooltip__button--email js-use-personal">
             <span class="tooltip__button--email__primary-text">
                 Use <span class="js-address">${formatDuckAddress(escapeXML(this.addresses.personalAddress))}</span>
@@ -43,12 +51,21 @@ ${includeStyles}
                 this.addressEl.textContent = formatDuckAddress(addresses.personalAddress)
             }
         }
+        function fillForm (address) {
+            const formattedAddress = formatDuckAddress(address)
+            if (isTopFrame) {
+                wkSend('selectedDetail', { credential: formattedAddress })
+            } else {
+                this.associatedForm.autofillEmail(formattedAddress)
+            }
+        }
         this.registerClickableButton(this.usePersonalButton, () => {
-            this.associatedForm.autofillEmail(formatDuckAddress(this.addresses.personalAddress))
+            fillForm(this.addresses.personalAddress)
         })
         this.registerClickableButton(this.usePrivateButton, () => {
-            this.associatedForm.autofillEmail(formatDuckAddress(this.addresses.privateAddress))
+            const email = this.addresses.privateAddress
             this.interface.refreshAlias()
+            fillForm(email)
         })
 
         // Get the alias from the extension
diff --git a/src/UI/styles/autofill-tooltip-styles.js b/src/UI/styles/autofill-tooltip-styles.js
index b20e06b..92e7261 100644
--- a/src/UI/styles/autofill-tooltip-styles.js
+++ b/src/UI/styles/autofill-tooltip-styles.js
@@ -15,18 +15,18 @@ module.exports = `
     transform: translate(-1000px);
     z-index: 2147483647;
 }
-.wrapper--data {
+:not(.desktop).wrapper--data {
     font-family: 'SF Pro Text', -apple-system,
     BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',
     'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
 }
-.tooltip {
+:not(.desktop) .tooltip {
     position: absolute;
     width: 300px;
     max-width: calc(100vw - 25px);
     z-index: 2147483647;
 }
-.tooltip--data {
+:not(.desktop) .tooltip--data {
     top: 100%;
     left: 100%;
     width: 315px;
@@ -41,7 +41,7 @@ module.exports = `
     color: #222222;
     box-shadow: 0 10px 20px rgba(0, 0, 0, 0.32);
 }
-.tooltip--email {
+:not(.desktop) .tooltip--email {
     top: calc(100% + 6px);
     right: calc(100% - 46px);
     padding: 8px;
diff --git a/src/appleDeviceUtils/appleDeviceUtils.js b/src/appleDeviceUtils/appleDeviceUtils.js
index 86e3830..b547e55 100644
--- a/src/appleDeviceUtils/appleDeviceUtils.js
+++ b/src/appleDeviceUtils/appleDeviceUtils.js
@@ -13,8 +13,10 @@ const ddgGlobals = require('./captureDdgGlobals')
  * @param {*} data
  * @returns {*}
  */
-const wkSend = (handler, data = {}) =>
-    window.webkit.messageHandlers[handler].postMessage({...data, messageHandling: {...data.messageHandling, secret}})
+const wkSend = (handler, data = {}) => {
+    console.log('wkSend', handler, data)
+    return window.webkit.messageHandlers[handler].postMessage({...data, messageHandling: {...data.messageHandling, secret}})
+}
 
 /**
  * Generate a random method name and adds it to the global scope
@@ -44,6 +46,7 @@ const generateRandomMethod = (randomMethodName, callback) => {
 const wkSendAndWait = async (handler, data = {}) => {
     if (hasModernWebkitAPI) {
         const response = await wkSend(handler, data)
+        console.log('got response', {response, handler, data})
         return ddgGlobals.JSONparse(response || '{}')
     }
 
diff --git a/src/autofill-utils.js b/src/autofill-utils.js
index c0d28db..de3dfb2 100644
--- a/src/autofill-utils.js
+++ b/src/autofill-utils.js
@@ -1,13 +1,18 @@
 const {getInputSubtype} = require('./Form/input-classifiers')
 
 let isApp = false
+let isTopFrame = false
 // Do not modify or remove the next line -- the app code will replace it with `isApp = true;`
 // INJECT isApp HERE
+// INJECT isTopFrame HERE
 
-const isDDGApp = /(iPhone|iPad|Android|Mac).*DuckDuckGo\/[0-9]/i.test(window.navigator.userAgent) || isApp
-
+// TODO find something better than this for the top frame.
+if (isTopFrame) {
+//    isApp = true
+}
+let isDDGApp = /(iPhone|iPad|Android|Mac).*DuckDuckGo\/[0-9]/i.test(window.navigator.userAgent) || isApp || isTopFrame
+isDDGApp = true // TODO fix
 const isAndroid = isDDGApp && /Android/i.test(window.navigator.userAgent)
-
 const isMobileApp = isDDGApp && !isApp
 
 const DDG_DOMAIN_REGEX = new RegExp(/^https:\/\/(([a-z0-9-_]+?)\.)?duckduckgo\.com\/email/)
@@ -235,6 +240,7 @@ function escapeXML (str) {
 
 module.exports = {
     isApp,
+    isTopFrame,
     isDDGApp,
     isAndroid,
     isMobileApp,
diff --git a/src/autofill.js b/src/autofill.js
index 69ae49d..fb25a1e 100644
--- a/src/autofill.js
+++ b/src/autofill.js
@@ -1,57 +1,26 @@
 (() => {
     try {
         if (!window.isSecureContext) return
-
+        console.log('start norm autofill')
         const listenForGlobalFormSubmission = require('./Form/listenForFormSubmission')
-        const {forms} = require('./scanForInputs')
-        const {isApp} = require('./autofill-utils')
-
         const inject = () => {
-            // Polyfills/shims
-            require('./requestIdleCallback')
-            const DeviceInterface = require('./DeviceInterface')
-
-            // Global listener for event delegation
-            window.addEventListener('pointerdown', (e) => {
-                if (!e.isTrusted) return
-
-                if (e.target.nodeName === 'DDG-AUTOFILL') {
-                    e.preventDefault()
-                    e.stopImmediatePropagation()
-
-                    const activeForm = [...forms.values()].find((form) => form.tooltip)
-                    if (activeForm) {
-                        activeForm.tooltip.dispatchClick()
-                    }
-                }
-
-                if (!isApp) return
-
-                // Check for clicks on submit buttons
-                const matchingForm = [...forms.values()].find(
-                    (form) => {
-                        const btns = [...form.submitButtons]
-                        if (btns.includes(e.target)) return true
-
-                        if (btns.find((btn) => btn.contains(e.target))) return true
-                    }
-                )
-                matchingForm?.submitHandler()
-            }, true)
-
-            if (isApp) {
-                window.addEventListener('submit', (e) =>
-                    forms.get(e.target)?.submitHandler(),
-                true)
-            }
-
-            DeviceInterface.init()
+            require('./init')
         }
 
         // chrome is only present in desktop browsers
         if (typeof chrome === 'undefined') {
+            const DeviceInterface = require('./DeviceInterface')
+            const observePageChanges = () => {
+                // TODO debounce these
+                // TODO we might want to duplicate this in the tabview to reduce the lag.
+                document.addEventListener('scroll', () => {
+                    DeviceInterface.closeTooltip()
+                })
+                // TODO add mutation observer to hide on sizing changes of the page
+            }
             listenForGlobalFormSubmission()
             inject()
+            observePageChanges()
         } else {
             // Check if the site is marked to skip autofill
             chrome.runtime.sendMessage(
diff --git a/src/init.js b/src/init.js
new file mode 100644
index 0000000..1b4b00a
--- /dev/null
+++ b/src/init.js
@@ -0,0 +1,41 @@
+// Polyfills/shims
+require('./requestIdleCallback')
+
+const {forms} = require('./scanForInputs')
+const {isApp} = require('./autofill-utils')
+const DeviceInterface = require('./DeviceInterface')
+// Global listener for event delegation
+window.addEventListener('pointerdown', (e) => {
+    console.log('PD', e)
+    if (!e.isTrusted) return
+
+    if (e.target.nodeName === 'DDG-AUTOFILL') {
+        e.preventDefault()
+        e.stopImmediatePropagation()
+
+        const activeForm = DeviceInterface.getActiveForm()
+        if (activeForm) {
+            activeForm.tooltip.dispatchClick()
+        }
+    }
+
+    if (!isApp) return
+
+    // Check for clicks on submit buttons
+    const matchingForm = [...forms.values()].find(
+        (form) => {
+            const btns = [...form.submitButtons]
+            if (btns.includes(e.target)) return true
+
+            if (btns.find((btn) => btn.contains(e.target))) return true
+        }
+    )
+    matchingForm?.submitHandler()
+}, true)
+
+if (isApp) {
+    window.addEventListener('submit', (e) =>
+        forms.get(e.target)?.submitHandler(),
+    true)
+}
+DeviceInterface.init()
diff --git a/src/scanForInputs.js b/src/scanForInputs.js
index 6681b4a..f3bd332 100644
--- a/src/scanForInputs.js
+++ b/src/scanForInputs.js
@@ -5,9 +5,29 @@ const {SUBMIT_BUTTON_SELECTOR, FORM_ELS_SELECTOR} = require('./Form/selectors')
 /** @type Map<HTMLFormElement, Form> */
 const forms = new Map()
 
+/* TODO check if we need this / should combine with getParentFormElement for a faster lookup
+const getParentFormInstance = (input, parentFormElement) => {
+    // Note that el.contains returns true for el itself
+    return [...forms.keys()].find((form) => form.contains(parentFormElement))
+}
+*/
+
+const getParentFormInstance = (parentFormElement) => {
+    return forms.get(parentFormElement)
+}
+
+const getOrCreateParentFormInstance = (input, parentFormElement, DeviceInterface) => {
+    let parentFormInstance = getParentFormInstance(input, parentFormElement)
+    if (!parentFormInstance) {
+        parentFormInstance = new Form(parentFormElement, input, DeviceInterface)
+        forms.set(parentFormElement, parentFormInstance)
+    }
+    return parentFormInstance
+}
+
 // Accepts the DeviceInterface as an explicit dependency
 const scanForInputs = (DeviceInterface) => {
-    const getParentForm = (input) => {
+    const getParentFormElement = (input) => {
         if (input.form) return input.form
 
         let element = input
@@ -22,12 +42,10 @@ const scanForInputs = (DeviceInterface) => {
                 return element
             }
         }
-
-        return input
     }
 
     const addInput = (input) => {
-        const parentForm = getParentForm(input)
+        const parentForm = getParentFormElement(input)
 
         // Note that el.contains returns true for el itself
         const previouslyFoundParent = [...forms.keys()].find((form) => form.contains(parentForm))
@@ -90,4 +108,4 @@ const scanForInputs = (DeviceInterface) => {
     })
 }
 
-module.exports = {scanForInputs, forms}
+module.exports = {scanForInputs, forms, getOrCreateParentFormInstance}
diff --git a/src/topAutofill.js b/src/topAutofill.js
new file mode 100644
index 0000000..ef82765
--- /dev/null
+++ b/src/topAutofill.js
@@ -0,0 +1,51 @@
+function setupFakeForm () {
+    let main = document.querySelector('main')
+    // TODO hey we're a PoC let's just fake the code to get it working
+    let fakeInput = document.createElement('input')
+    fakeInput.type = 'email'
+    fakeInput.name = 'email'
+    fakeInput.autocomplete = 'email'
+    let fakeForm = document.createElement('form')
+    fakeForm.appendChild(fakeInput)
+    main.appendChild(fakeForm)
+    return {fakeInput, fakeForm}
+}
+
+function init () {
+    const {fakeInput, fakeForm} = setupFakeForm()
+    const DeviceInterface = require('./DeviceInterface')
+    // TODO
+    function triggerFormSetup () {
+        const {getOrCreateParentFormInstance} = require('./scanForInputs')
+        const parentFormInstance = getOrCreateParentFormInstance(fakeInput, fakeForm, DeviceInterface)
+        console.log('triggerFormSetup', fakeInput, fakeInput.form, parentFormInstance)
+        DeviceInterface.setActiveForm(fakeInput, parentFormInstance)
+    }
+    window.addEventListener('InitComplete', triggerFormSetup)
+    // const EmailAutofill = require('./UI/EmailAutofill')
+    /*
+    const {
+        wkSend
+    } = require('./appleDeviceUtils/appleDeviceUtils')
+*/
+    // const DataAutofill = require('./UI/DataAutofill')
+
+    require('./init')
+    // let af = new EmailAutofill(fakeInput, fakeForm, DeviceInterface)
+    // console.log(af)
+    /*
+    fakeForm.style.visibility = "hidden" // TODO have a way to handle no input element instead
+    fakeForm.style.display = "none"
+     */
+
+    setTimeout(triggerFormSetup, 4000)
+
+/*
+    let button = document.querySelector('button')
+    button.addEventListener('click', () => {
+        // eslint-disable-next-line no-undef
+        wkSend('selectedDetail', { credential: 'jkt@duck.com' })
+    })
+ */
+}
+window.addEventListener('load', init)
-- 
2.32.0 (Apple Git-132)


From aade78effc8f423289ee1f726bee9b0528734e31 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Tue, 30 Nov 2021 15:41:30 +0000
Subject: [PATCH 02/11] Clean up message passing and form visibility

---
 src/DeviceInterface.js | 20 ++++++++++----------
 src/UI/Tooltip.js      |  7 +++++--
 src/topAutofill.js     |  1 +
 3 files changed, 16 insertions(+), 12 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index 1bb9bb5..df697e6 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -30,8 +30,8 @@ const attachTooltip = function (form, input, e) {
         // TODO check screenX/Y is correct over clientX, layerX, etc
         let diffX = Math.floor(e.x - dimensions.x)
         let diffY = Math.floor(e.y - dimensions.y)
-        const inputLeft = Math.floor(/* e.x - */inputClientDimensions.x/* - window.scrollX */)
-        const inputTop = Math.floor(/* e.y - */inputClientDimensions.y/* - window.scrollY */)
+        const inputLeft = Math.floor(inputClientDimensions.x)
+        const inputTop = Math.floor(inputClientDimensions.y)
 
         /*
         const red = document.createElement("div");
@@ -52,14 +52,14 @@ const attachTooltip = function (form, input, e) {
         */
 
         DeviceInterface.showTooltip({
-            top: String(diffY),
-            left: String(diffX),
-            height: String(dimensions.height),
-            width: String(dimensions.width),
-            inputHeight: String(Math.floor(inputClientDimensions.height)),
-            inputWidth: String(Math.floor(inputClientDimensions.width)),
-            inputTop: String(inputTop),
-            inputLeft: String(inputLeft)
+            top: diffY,
+            left: diffX,
+            height: dimensions.height,
+            width: dimensions.width,
+            inputHeight: Math.floor(inputClientDimensions.height),
+            inputWidth: Math.floor(inputClientDimensions.width),
+            inputTop: inputTop,
+            inputLeft: inputLeft
         })
         currentAttached = {form, input}
     }
diff --git a/src/UI/Tooltip.js b/src/UI/Tooltip.js
index 6c7f5ad..e20d2c4 100644
--- a/src/UI/Tooltip.js
+++ b/src/UI/Tooltip.js
@@ -1,4 +1,4 @@
-const {safeExecute, addInlineStyles, getDaxBoundingBox} = require('../autofill-utils')
+const {safeExecute, addInlineStyles, getDaxBoundingBox, isTopFrame} = require('../autofill-utils')
 const {getInputMainType} = require('../Form/input-classifiers')
 
 const updatePosition = function ({left, top}) {
@@ -20,7 +20,10 @@ const updatePosition = function ({left, top}) {
         this.transformRuleIndex = shadow.styleSheets[0].rules.length
     }
 
-    const newRule = `.wrapper {transform: translate(${left}px, ${top}px);}`
+    let newRule = `.wrapper {transform: translate(${left}px, ${top}px);}`
+    if (isTopFrame) {
+        newRule = '.wrapper {transform: none; }'
+    }
     shadow.styleSheets[0].insertRule(newRule, this.transformRuleIndex)
 }
 
diff --git a/src/topAutofill.js b/src/topAutofill.js
index ef82765..ea656d3 100644
--- a/src/topAutofill.js
+++ b/src/topAutofill.js
@@ -6,6 +6,7 @@ function setupFakeForm () {
     fakeInput.name = 'email'
     fakeInput.autocomplete = 'email'
     let fakeForm = document.createElement('form')
+    fakeForm.style.visibility = 'collapse'
     fakeForm.appendChild(fakeInput)
     main.appendChild(fakeForm)
     return {fakeInput, fakeForm}
-- 
2.32.0 (Apple Git-132)


From bd4f36c6aa9e04598712f0169030e7742ba0ba42 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Wed, 1 Dec 2021 17:40:23 +0000
Subject: [PATCH 03/11] Handle different input types

---
 src/DeviceInterface.js | 11 +++++++++--
 src/topAutofill.js     | 23 ++++++++++++-----------
 2 files changed, 21 insertions(+), 13 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index df697e6..eba9366 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -23,6 +23,7 @@ const SIGN_IN_MSG = { signMeIn: true }
 
 let currentAttached = {}
 const attachTooltip = function (form, input, e) {
+    const inputType = getInputConfig(input).type
     if (!isTopFrame) {
         let dimensions = getDaxBoundingBox(input)
         const inputClientDimensions = input.getBoundingClientRect()
@@ -59,7 +60,8 @@ const attachTooltip = function (form, input, e) {
             inputHeight: Math.floor(inputClientDimensions.height),
             inputWidth: Math.floor(inputClientDimensions.width),
             inputTop: inputTop,
-            inputLeft: inputLeft
+            inputLeft: inputLeft,
+            inputType: inputType
         })
         currentAttached = {form, input}
     }
@@ -73,7 +75,8 @@ const attachTooltip = function (form, input, e) {
     } else {
         if (form.tooltip) return
 
-        form.tooltip = !isApp
+        form.activeInput = input
+        form.tooltip = inputType === 'emailNew'
             ? new EmailAutofill(input, form, this)
             : new DataAutofill(input, form, this)
         form.intObs.observe(input)
@@ -521,6 +524,10 @@ class AppleDeviceInterface extends InterfacePrototype {
     get hasLocalCreditCards () {
         return this.#dataApple.creditCards
     }
+    async getInputType () {
+        const {inputType} = await wkSendAndWait('emailHandlerCheckAppSignedInStatus')
+        return inputType
+    }
 }
 
 const DeviceInterface = (() => {
diff --git a/src/topAutofill.js b/src/topAutofill.js
index ea656d3..c53bb74 100644
--- a/src/topAutofill.js
+++ b/src/topAutofill.js
@@ -1,10 +1,15 @@
-function setupFakeForm () {
+function setupFakeForm (inputType) {
     let main = document.querySelector('main')
     // TODO hey we're a PoC let's just fake the code to get it working
     let fakeInput = document.createElement('input')
-    fakeInput.type = 'email'
-    fakeInput.name = 'email'
-    fakeInput.autocomplete = 'email'
+    let outputType = 'email'
+    console.log('it', inputType)
+    if (inputType === 'credentials') {
+        outputType = 'username'
+    }
+    fakeInput.type = outputType
+    fakeInput.name = outputType
+    fakeInput.autocomplete = outputType
     let fakeForm = document.createElement('form')
     fakeForm.style.visibility = 'collapse'
     fakeForm.appendChild(fakeInput)
@@ -12,9 +17,10 @@ function setupFakeForm () {
     return {fakeInput, fakeForm}
 }
 
-function init () {
-    const {fakeInput, fakeForm} = setupFakeForm()
+async function init () {
     const DeviceInterface = require('./DeviceInterface')
+    const inputType = await DeviceInterface.getInputType()
+    const {fakeInput, fakeForm} = setupFakeForm(inputType)
     // TODO
     function triggerFormSetup () {
         const {getOrCreateParentFormInstance} = require('./scanForInputs')
@@ -24,11 +30,6 @@ function init () {
     }
     window.addEventListener('InitComplete', triggerFormSetup)
     // const EmailAutofill = require('./UI/EmailAutofill')
-    /*
-    const {
-        wkSend
-    } = require('./appleDeviceUtils/appleDeviceUtils')
-*/
     // const DataAutofill = require('./UI/DataAutofill')
 
     require('./init')
-- 
2.32.0 (Apple Git-132)


From c553c409a7551df609e3e12519bf6dadb53bf4a6 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Mon, 6 Dec 2021 23:23:30 +0000
Subject: [PATCH 04/11] Add credentials form and clean up

---
 src/topAutofill.js | 49 +++++++++++++++++++++++-----------------------
 1 file changed, 24 insertions(+), 25 deletions(-)

diff --git a/src/topAutofill.js b/src/topAutofill.js
index c53bb74..66e5172 100644
--- a/src/topAutofill.js
+++ b/src/topAutofill.js
@@ -1,18 +1,33 @@
+function makeField (outputType) {
+    let field = document.createElement('input')
+    field.type = outputType
+    field.name = outputType
+    field.autocomplete = outputType
+    return field
+}
+
 function setupFakeForm (inputType) {
     let main = document.querySelector('main')
     // TODO hey we're a PoC let's just fake the code to get it working
-    let fakeInput = document.createElement('input')
-    let outputType = 'email'
-    console.log('it', inputType)
+    let fakeForm = document.createElement('form')
+    let fakeInput = makeField('email')
+
     if (inputType === 'credentials') {
-        outputType = 'username'
+        fakeInput = makeField('username')
+        fakeForm.appendChild(fakeInput)
+
+        const fakePassword = makeField('password')
+        fakePassword.autocomplete = 'current-password'
+        fakeForm.appendChild(fakePassword)
+
+        let fakeButton = document.createElement('button')
+        fakeButton.textContent = 'Log in'
+        fakeForm.appendChild(fakeButton)
+    } else {
+        fakeForm.appendChild(fakeInput)
     }
-    fakeInput.type = outputType
-    fakeInput.name = outputType
-    fakeInput.autocomplete = outputType
-    let fakeForm = document.createElement('form')
+
     fakeForm.style.visibility = 'collapse'
-    fakeForm.appendChild(fakeInput)
     main.appendChild(fakeForm)
     return {fakeInput, fakeForm}
 }
@@ -29,25 +44,9 @@ async function init () {
         DeviceInterface.setActiveForm(fakeInput, parentFormInstance)
     }
     window.addEventListener('InitComplete', triggerFormSetup)
-    // const EmailAutofill = require('./UI/EmailAutofill')
-    // const DataAutofill = require('./UI/DataAutofill')
 
     require('./init')
-    // let af = new EmailAutofill(fakeInput, fakeForm, DeviceInterface)
-    // console.log(af)
-    /*
-    fakeForm.style.visibility = "hidden" // TODO have a way to handle no input element instead
-    fakeForm.style.display = "none"
-     */
 
     setTimeout(triggerFormSetup, 4000)
-
-/*
-    let button = document.querySelector('button')
-    button.addEventListener('click', () => {
-        // eslint-disable-next-line no-undef
-        wkSend('selectedDetail', { credential: 'jkt@duck.com' })
-    })
- */
 }
 window.addEventListener('load', init)
-- 
2.32.0 (Apple Git-132)


From 3b4eb41bee3d49c8481ea7a6f2142e3190b5b775 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Mon, 13 Dec 2021 10:42:45 +0000
Subject: [PATCH 05/11] Handle filling different form types and remove
 stripping for apple interfaces

---
 src/DeviceInterface.js | 82 ++++++++++++++++++++++++++++--------------
 1 file changed, 55 insertions(+), 27 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index eba9366..5d46f9e 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -64,6 +64,7 @@ const attachTooltip = function (form, input, e) {
             inputType: inputType
         })
         currentAttached = {form, input}
+        return
     }
     form.activeInput = input
     // TODO get working again
@@ -74,7 +75,6 @@ const attachTooltip = function (form, input, e) {
         })
     } else {
         if (form.tooltip) return
-
         form.activeInput = input
         form.tooltip = inputType === 'emailNew'
             ? new EmailAutofill(input, form, this)
@@ -85,9 +85,13 @@ const attachTooltip = function (form, input, e) {
     }
 }
 
+// TODO move somewhere apple specific
 document.addEventListener('InboundCredential', function (e) {
-    console.log('inbound', e)
-    currentAttached.form.autofillEmail(e.detail.credential)
+    if ('email' in e.detail.data) {
+        currentAttached.form.autofillEmail(e.detail.data.email)
+    } else {
+        currentAttached.form.autofillData(e.detail.data, e.detail.configType)
+    }
 })
 
 let attempts = 0
@@ -156,13 +160,17 @@ class InterfacePrototype {
         return [...identities, ...newIdentities]
     }
 
+    stripCredentials = false
+
     /**
      * Stores init data coming from the device
      * @param { PMData } data
      */
     storeLocalData (data) {
-        data.credentials.forEach((cred) => delete cred.password)
-        data.creditCards.forEach((cc) => delete cc.cardNumber && delete cc.cardSecurityCode)
+        if (this.stripCredentials) {
+            data.credentials.forEach((cred) => delete cred.password)
+            data.creditCards.forEach((cc) => delete cc.cardNumber && delete cc.cardSecurityCode)
+        }
         // Store the full name as a separate field to simplify autocomplete
         const updatedIdentities = data.identities.map((identity) => ({
             ...identity,
@@ -320,6 +328,30 @@ class ExtensionInterface extends InterfacePrototype {
     }
 }
 
+const duckduckgoDebugMessaging = (function () {
+    let log = () => {}
+    let signpostEvent = () => {}
+
+    if (true) {
+        signpostEvent = function signpostEvent (data) {
+            try {
+                webkit.messageHandlers.signpostMessage.postMessage(data)
+            } catch (error) {}
+        }
+
+        log = function log () {
+            try {
+                webkit.messageHandlers.log.postMessage(JSON.stringify(arguments))
+            } catch (error) {}
+        }
+    }
+
+    return {
+        signpostEvent,
+        log
+    }
+}())
+
 class AndroidInterface extends InterfacePrototype {
     constructor () {
         super()
@@ -352,21 +384,26 @@ class AndroidInterface extends InterfacePrototype {
 
 class AppleDeviceInterface extends InterfacePrototype {
     constructor () {
+        duckduckgoDebugMessaging.log('interface init')
         super()
+        if (isTopFrame) {
+            this.stripCredentials = false
+        }
 
         this.setupAutofill = async ({shouldLog} = {shouldLog: false}) => {
+            duckduckgoDebugMessaging.log('setup autofill')
             if (isDDGDomain()) {
                 // Tell the web app whether we're in the app
                 notifyWebApp({isApp})
             }
-
-            if (isApp && !isTopFrame) {
+            if (isApp) {
                 await this.getAutofillInitData()
             }
 
+            // TODO is this needed when the field type is email?
             const signedIn = await this._checkDeviceSignedIn()
             if (signedIn) {
-                if (isApp && !isTopFrame) {
+                if (isApp /* && !isTopFrame */) {
                     await this.getAddresses()
                 }
                 notifyWebApp({ deviceSignedIn: {value: true, shouldLog} })
@@ -455,8 +492,10 @@ class AppleDeviceInterface extends InterfacePrototype {
          * @returns {APIResponse<PMData>}
          */
         this.getAutofillInitData = () => {
+            // duckduckgoDebugMessaging.log("got here a")
             return wkSendAndWait('pmHandlerGetAutofillInitData')
                 .then((response) => {
+                    // duckduckgoDebugMessaging.log("got here")
                     this.storeLocalData(response.success)
                     return response
                 })
@@ -503,27 +542,16 @@ class AppleDeviceInterface extends InterfacePrototype {
         this.getAutofillCreditCard = (id) =>
             wkSendAndWait('pmHandlerGetCreditCard', { id })
     }
-    #dataApple = {
-        credentials: false,
-        creditCards: false,
-        identities: false
-    }
 
-    storeLocalData (data) {
-        if (isTopFrame) {
-            return DeviceInterface.storeLocalData.apply(this, arguments)
-        }
-        this.#dataApple = data
-    }
-    get hasLocalCredentials () {
-        return this.#dataApple.credentials
-    }
-    get hasLocalIdentities () {
-        return this.#dataApple.identities
-    }
-    get hasLocalCreditCards () {
-        return this.#dataApple.creditCards
+    // Used to encode data to send back to the child autofill
+    async selectedDetail (detailIn, configType) {
+        let detailsEntries = Object.entries(detailIn).map(([key, value]) => {
+            return [key, String(value)]
+        })
+        const data = Object.fromEntries(detailsEntries)
+        wkSend('selectedDetail', { data, configType })
     }
+
     async getInputType () {
         const {inputType} = await wkSendAndWait('emailHandlerCheckAppSignedInStatus')
         return inputType
-- 
2.32.0 (Apple Git-132)


From 525f39bb79ecdca5bae3a1b5dfc1ba2a59259bab Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Mon, 13 Dec 2021 10:45:13 +0000
Subject: [PATCH 06/11] Remove debugging calls

---
 src/DeviceInterface.js | 28 ----------------------------
 1 file changed, 28 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index 5d46f9e..466e76e 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -328,30 +328,6 @@ class ExtensionInterface extends InterfacePrototype {
     }
 }
 
-const duckduckgoDebugMessaging = (function () {
-    let log = () => {}
-    let signpostEvent = () => {}
-
-    if (true) {
-        signpostEvent = function signpostEvent (data) {
-            try {
-                webkit.messageHandlers.signpostMessage.postMessage(data)
-            } catch (error) {}
-        }
-
-        log = function log () {
-            try {
-                webkit.messageHandlers.log.postMessage(JSON.stringify(arguments))
-            } catch (error) {}
-        }
-    }
-
-    return {
-        signpostEvent,
-        log
-    }
-}())
-
 class AndroidInterface extends InterfacePrototype {
     constructor () {
         super()
@@ -384,14 +360,12 @@ class AndroidInterface extends InterfacePrototype {
 
 class AppleDeviceInterface extends InterfacePrototype {
     constructor () {
-        duckduckgoDebugMessaging.log('interface init')
         super()
         if (isTopFrame) {
             this.stripCredentials = false
         }
 
         this.setupAutofill = async ({shouldLog} = {shouldLog: false}) => {
-            duckduckgoDebugMessaging.log('setup autofill')
             if (isDDGDomain()) {
                 // Tell the web app whether we're in the app
                 notifyWebApp({isApp})
@@ -492,10 +466,8 @@ class AppleDeviceInterface extends InterfacePrototype {
          * @returns {APIResponse<PMData>}
          */
         this.getAutofillInitData = () => {
-            // duckduckgoDebugMessaging.log("got here a")
             return wkSendAndWait('pmHandlerGetAutofillInitData')
                 .then((response) => {
-                    // duckduckgoDebugMessaging.log("got here")
                     this.storeLocalData(response.success)
                     return response
                 })
-- 
2.32.0 (Apple Git-132)


From 2358b3bfb353a0a21ed87c38e2c1dea58087f7d1 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Mon, 13 Dec 2021 10:46:47 +0000
Subject: [PATCH 07/11] Move UI autofilling into their own functions and call
 device interface when top

---
 src/UI/DataAutofill.js  | 12 ++++++++++++
 src/UI/EmailAutofill.js | 22 +++++++++++-----------
 2 files changed, 23 insertions(+), 11 deletions(-)

diff --git a/src/UI/DataAutofill.js b/src/UI/DataAutofill.js
index 8627bba..a79ef6f 100644
--- a/src/UI/DataAutofill.js
+++ b/src/UI/DataAutofill.js
@@ -1,5 +1,6 @@
 const {
     isApp,
+    isTopFrame,
     escapeXML
 } = require('../autofill-utils')
 const Tooltip = require('./Tooltip')
@@ -66,16 +67,27 @@ ${escapeXML(singleData[config.displaySubtitlePropName] || config.displaySubtitle
         this.autofillButtons.forEach((btn) => {
             this.registerClickableButton(btn, () => {
                 this.interface[`${config.autofillMethod}`](btn.id).then(({success, error}) => {
+<<<<<<< HEAD
                     if (success) {
                         this.associatedForm.autofillData(success, config.type)
                         if (btn.id === 'privateAddress') this.interface.refreshAlias()
                     }
+=======
+                    if (success) this.fillForm(success, config.type)
+>>>>>>> 5753a12 (Move UI autofilling into their own functions and call device interface when top)
                 })
             })
         })
 
         this.init()
     }
+    fillForm (detail, configType) {
+        if (isTopFrame) {
+            this.interface.selectedDetail(detail, configType)
+        } else {
+            this.associatedForm.autofillData(detail, configType)
+        }
+    }
 }
 
 module.exports = DataAutofill
diff --git a/src/UI/EmailAutofill.js b/src/UI/EmailAutofill.js
index 53be8c5..773a7b2 100644
--- a/src/UI/EmailAutofill.js
+++ b/src/UI/EmailAutofill.js
@@ -4,10 +4,10 @@ const {
     escapeXML,
     isTopFrame
 } = require('../autofill-utils')
+const Tooltip = require('./Tooltip')
 const {
     wkSend
 } = require('../appleDeviceUtils/appleDeviceUtils')
-const Tooltip = require('./Tooltip')
 
 class EmailAutofill extends Tooltip {
     constructor (input, associatedForm, Interface) {
@@ -51,21 +51,13 @@ ${includeStyles}
                 this.addressEl.textContent = formatDuckAddress(addresses.personalAddress)
             }
         }
-        function fillForm (address) {
-            const formattedAddress = formatDuckAddress(address)
-            if (isTopFrame) {
-                wkSend('selectedDetail', { credential: formattedAddress })
-            } else {
-                this.associatedForm.autofillEmail(formattedAddress)
-            }
-        }
         this.registerClickableButton(this.usePersonalButton, () => {
-            fillForm(this.addresses.personalAddress)
+            this.fillForm(this.addresses.personalAddress)
         })
         this.registerClickableButton(this.usePrivateButton, () => {
             const email = this.addresses.privateAddress
             this.interface.refreshAlias()
-            fillForm(email)
+            this.fillForm(email)
         })
 
         // Get the alias from the extension
@@ -73,6 +65,14 @@ ${includeStyles}
 
         this.init()
     }
+    fillForm (address) {
+        const formattedAddress = formatAddress(address)
+        if (isTopFrame) {
+            this.interface.selectedDetail({email: formattedAddress}, 'email')
+        } else {
+            this.associatedForm.autofillEmail(formattedAddress)
+        }
+    }
 }
 
 module.exports = EmailAutofill
-- 
2.32.0 (Apple Git-132)


From 869f9dc9a943024157baa623f18d4b435cfed250 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Mon, 13 Dec 2021 10:49:55 +0000
Subject: [PATCH 08/11] Linting fixes

---
 src/DeviceInterface.js  |  2 +-
 src/UI/DataAutofill.js  |  6 +-----
 src/UI/EmailAutofill.js |  5 +----
 src/init.js             |  1 +
 src/scanForInputs.js    | 19 +++++--------------
 5 files changed, 9 insertions(+), 24 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index 466e76e..fde2fa4 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -377,7 +377,7 @@ class AppleDeviceInterface extends InterfacePrototype {
             // TODO is this needed when the field type is email?
             const signedIn = await this._checkDeviceSignedIn()
             if (signedIn) {
-                if (isApp /* && !isTopFrame */) {
+                if (isApp) {
                     await this.getAddresses()
                 }
                 notifyWebApp({ deviceSignedIn: {value: true, shouldLog} })
diff --git a/src/UI/DataAutofill.js b/src/UI/DataAutofill.js
index a79ef6f..fc010ac 100644
--- a/src/UI/DataAutofill.js
+++ b/src/UI/DataAutofill.js
@@ -67,14 +67,10 @@ ${escapeXML(singleData[config.displaySubtitlePropName] || config.displaySubtitle
         this.autofillButtons.forEach((btn) => {
             this.registerClickableButton(btn, () => {
                 this.interface[`${config.autofillMethod}`](btn.id).then(({success, error}) => {
-<<<<<<< HEAD
                     if (success) {
-                        this.associatedForm.autofillData(success, config.type)
+                        this.fillForm(success, config.type)
                         if (btn.id === 'privateAddress') this.interface.refreshAlias()
                     }
-=======
-                    if (success) this.fillForm(success, config.type)
->>>>>>> 5753a12 (Move UI autofilling into their own functions and call device interface when top)
                 })
             })
         })
diff --git a/src/UI/EmailAutofill.js b/src/UI/EmailAutofill.js
index 773a7b2..9ed997a 100644
--- a/src/UI/EmailAutofill.js
+++ b/src/UI/EmailAutofill.js
@@ -5,9 +5,6 @@ const {
     isTopFrame
 } = require('../autofill-utils')
 const Tooltip = require('./Tooltip')
-const {
-    wkSend
-} = require('../appleDeviceUtils/appleDeviceUtils')
 
 class EmailAutofill extends Tooltip {
     constructor (input, associatedForm, Interface) {
@@ -66,7 +63,7 @@ ${includeStyles}
         this.init()
     }
     fillForm (address) {
-        const formattedAddress = formatAddress(address)
+        const formattedAddress = formatDuckAddress(address)
         if (isTopFrame) {
             this.interface.selectedDetail({email: formattedAddress}, 'email')
         } else {
diff --git a/src/init.js b/src/init.js
index 1b4b00a..9ac7512 100644
--- a/src/init.js
+++ b/src/init.js
@@ -4,6 +4,7 @@ require('./requestIdleCallback')
 const {forms} = require('./scanForInputs')
 const {isApp} = require('./autofill-utils')
 const DeviceInterface = require('./DeviceInterface')
+
 // Global listener for event delegation
 window.addEventListener('pointerdown', (e) => {
     console.log('PD', e)
diff --git a/src/scanForInputs.js b/src/scanForInputs.js
index f3bd332..a18f6ef 100644
--- a/src/scanForInputs.js
+++ b/src/scanForInputs.js
@@ -45,22 +45,13 @@ const scanForInputs = (DeviceInterface) => {
     }
 
     const addInput = (input) => {
-        const parentForm = getParentFormElement(input)
+        const parentFormElement = getParentFormElement(input)
 
-        // Note that el.contains returns true for el itself
-        const previouslyFoundParent = [...forms.keys()].find((form) => form.contains(parentForm))
+        // if this form is an ancestor of an existing form, remove that before adding this
+        const childForm = [...forms.keys()].find((form) => parentFormElement.contains(form))
+        forms.delete(childForm)
 
-        if (previouslyFoundParent) {
-            // If we've already met the form or a descendant, add the input
-            forms.get(previouslyFoundParent).addInput(input)
-        } else {
-            // if this form is an ancestor of an existing form, remove that before adding this
-            const childForm = [...forms.keys()].find((form) => parentForm.contains(form))
-            forms.get(childForm)?.destroy()
-            forms.delete(childForm)
-
-            forms.set(parentForm, new Form(parentForm, input, DeviceInterface))
-        }
+        getOrCreateParentFormInstance(input, parentFormElement, DeviceInterface)
     }
 
     const findEligibleInput = (context) => {
-- 
2.32.0 (Apple Git-132)


From 853e71159a7b41fef808ad5794b1ebda5dba1905 Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Tue, 18 Jan 2022 03:36:30 +0000
Subject: [PATCH 09/11] Fixes for sizing, tab code, styling

---
 src/DeviceInterface.js                   | 14 ++++++++++----
 src/TopAutofill.html                     |  6 +++---
 src/UI/Tooltip.js                        |  3 ++-
 src/UI/styles/autofill-tooltip-styles.js |  8 +++++---
 src/topAutofill.js                       |  9 +++------
 5 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index fde2fa4..937cfb2 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -201,9 +201,9 @@ class InterfacePrototype {
 
     init () {
         this.attachTooltip = attachTooltip.bind(this)
-        const start = () => {
+        const start = async () => {
             this.addDeviceListeners()
-            this.setupAutofill()
+            await this.setupAutofill()
             const event = new CustomEvent('InitComplete', {})
             window.dispatchEvent(event)
         }
@@ -253,7 +253,7 @@ class ExtensionInterface extends InterfacePrototype {
         this.isDeviceSignedIn = () => this.hasLocalAddresses
 
         this.setupAutofill = ({shouldLog} = {shouldLog: false}) => {
-            this.getAddresses().then(addresses => {
+            return this.getAddresses().then(addresses => {
                 if (this.hasLocalAddresses) {
                     notifyWebApp({ deviceSignedIn: {value: true, shouldLog} })
                     scanForInputs(this)
@@ -398,7 +398,6 @@ class AppleDeviceInterface extends InterfacePrototype {
             currentAttached.form = form
             currentAttached.input = input
             form.activeInput = input
-            console.log('got here, the following needs to load at the right moment')
             const inputType = getInputConfig(input).type
             form.tooltip = inputType === 'emailNew'
                 ? new EmailAutofill(input, form, this)
@@ -406,8 +405,15 @@ class AppleDeviceInterface extends InterfacePrototype {
             form.intObs.observe(input)
             window.addEventListener('pointerdown', form.removeTooltip, {capture: true})
             window.addEventListener('input', form.removeTooltip, {once: true})
+            // TODO calc height correctly
+            const innerNode = document.querySelector('ddg-autofill').shadowRoot.querySelector('.wrapper--data')
+            this.setSize({height: innerNode.clientHeight, width: innerNode.clientWidth})
         }
 
+        this.setSize = async (details) => {
+            await wkSend('setSize', details)
+        }
+        
         this.showTooltip = async (details) => {
             await wkSend('showAutofillParent', details)
         }
diff --git a/src/TopAutofill.html b/src/TopAutofill.html
index 212afbd..6fac787 100644
--- a/src/TopAutofill.html
+++ b/src/TopAutofill.html
@@ -2,12 +2,12 @@
 <head>
 <style>
     html, body {
-        background-color:transparent;
-        margin: 5px;
+        background-color: transparent;
+        margin: 0;
     }
 </style>
 </head>
-<body>
+<body id="topAutofill">
   <main></main>
 </body>
 </html>
diff --git a/src/UI/Tooltip.js b/src/UI/Tooltip.js
index e20d2c4..4f48015 100644
--- a/src/UI/Tooltip.js
+++ b/src/UI/Tooltip.js
@@ -67,7 +67,8 @@ const ensureIsLastInDOM = function () {
 
 class Tooltip {
     constructor (input, associatedForm, Interface) {
-        this.shadow = document.createElement('ddg-autofill').attachShadow({mode: 'closed'})
+        const mode = isTopFrame ? 'open' : 'closed'
+        this.shadow = document.createElement('ddg-autofill').attachShadow({ mode })
         this.host = this.shadow.host
         this.tooltip = null
         const forcedVisibilityStyles = {
diff --git a/src/UI/styles/autofill-tooltip-styles.js b/src/UI/styles/autofill-tooltip-styles.js
index 92e7261..55626ef 100644
--- a/src/UI/styles/autofill-tooltip-styles.js
+++ b/src/UI/styles/autofill-tooltip-styles.js
@@ -26,6 +26,11 @@ module.exports = `
     max-width: calc(100vw - 25px);
     z-index: 2147483647;
 }
+.tooltip--data, #topAutofill {
+    background-color: rgba(242, 240, 240, 0.9);
+    -webkit-backdrop-filter: blur(40px);
+    backdrop-filter: blur(40px);
+}
 :not(.desktop) .tooltip--data {
     top: 100%;
     left: 100%;
@@ -33,9 +38,6 @@ module.exports = `
     padding: 4px;
     border: 0.5px solid rgba(0, 0, 0, 0.2);
     border-radius: 6px;
-    background-color: rgba(242, 240, 240, 0.9);
-    -webkit-backdrop-filter: blur(40px);
-    backdrop-filter: blur(40px);
     font-size: 13px;
     line-height: 14px;
     color: #222222;
diff --git a/src/topAutofill.js b/src/topAutofill.js
index 66e5172..6c87547 100644
--- a/src/topAutofill.js
+++ b/src/topAutofill.js
@@ -36,17 +36,14 @@ async function init () {
     const DeviceInterface = require('./DeviceInterface')
     const inputType = await DeviceInterface.getInputType()
     const {fakeInput, fakeForm} = setupFakeForm(inputType)
-    // TODO
     function triggerFormSetup () {
         const {getOrCreateParentFormInstance} = require('./scanForInputs')
         const parentFormInstance = getOrCreateParentFormInstance(fakeInput, fakeForm, DeviceInterface)
-        console.log('triggerFormSetup', fakeInput, fakeInput.form, parentFormInstance)
         DeviceInterface.setActiveForm(fakeInput, parentFormInstance)
     }
-    window.addEventListener('InitComplete', triggerFormSetup)
-
+    window.addEventListener('InitComplete', () => {
+        triggerFormSetup()
+    })
     require('./init')
-
-    setTimeout(triggerFormSetup, 4000)
 }
 window.addEventListener('load', init)
-- 
2.32.0 (Apple Git-132)


From 9c3deee5b53c56f035acc3edbf260db391281a7f Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Thu, 20 Jan 2022 03:34:21 +0000
Subject: [PATCH 10/11] Fix timing size set issue

---
 src/DeviceInterface.js | 7 +++----
 src/UI/Tooltip.js      | 8 ++++++++
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index 937cfb2..78ea727 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -405,13 +405,12 @@ class AppleDeviceInterface extends InterfacePrototype {
             form.intObs.observe(input)
             window.addEventListener('pointerdown', form.removeTooltip, {capture: true})
             window.addEventListener('input', form.removeTooltip, {once: true})
-            // TODO calc height correctly
-            const innerNode = document.querySelector('ddg-autofill').shadowRoot.querySelector('.wrapper--data')
-            this.setSize({height: innerNode.clientHeight, width: innerNode.clientWidth})
+            this.setSize()
         }
 
         this.setSize = async (details) => {
-            await wkSend('setSize', details)
+            const innerNode = document.querySelector('ddg-autofill').shadowRoot.querySelector('.wrapper--data')
+            await wkSend('setSize', {height: innerNode.clientHeight, width: innerNode.clientWidth})
         }
         
         this.showTooltip = async (details) => {
diff --git a/src/UI/Tooltip.js b/src/UI/Tooltip.js
index 4f48015..43b6162 100644
--- a/src/UI/Tooltip.js
+++ b/src/UI/Tooltip.js
@@ -146,6 +146,14 @@ class Tooltip {
         this.resObs.observe(document.body)
         this.mutObs.observe(document.body, {childList: true, subtree: true, attributes: true})
         window.addEventListener('scroll', this.checkPosition, {passive: true, capture: true})
+        this.interface.setSize()
+
+        // TODO Not ideal, we wait till after the form is filled.
+        requestIdleCallback(() => {
+            requestIdleCallback(() => {
+                this.interface.setSize()
+            })
+        })
     }
 }
 
-- 
2.32.0 (Apple Git-132)


From 6eaa5365894a3b340f1d58cbbecf739b9e46d03b Mon Sep 17 00:00:00 2001
From: Jonathan Kingston <jkingston@duckduckgo.com>
Date: Wed, 26 Jan 2022 01:34:14 +0000
Subject: [PATCH 11/11] Update

---
 src/DeviceInterface.js                   | 96 +++++++++++++-----------
 src/Form/input-classifiers.js            |  4 +-
 src/TopAutofill.html                     |  2 +-
 src/UI/styles/autofill-tooltip-styles.js | 12 +--
 src/topAutofill.js                       |  7 +-
 5 files changed, 68 insertions(+), 53 deletions(-)

diff --git a/src/DeviceInterface.js b/src/DeviceInterface.js
index 78ea727..ce3a644 100644
--- a/src/DeviceInterface.js
+++ b/src/DeviceInterface.js
@@ -22,48 +22,13 @@ const getInputConfig = require('./Form/inputTypeConfig')
 const SIGN_IN_MSG = { signMeIn: true }
 
 let currentAttached = {}
+
+
 const attachTooltip = function (form, input, e) {
+    console.log("attach tooltip", input, e)
     const inputType = getInputConfig(input).type
     if (!isTopFrame) {
-        let dimensions = getDaxBoundingBox(input)
-        const inputClientDimensions = input.getBoundingClientRect()
-        console.log(dimensions, e, input, inputClientDimensions)
-        // TODO check screenX/Y is correct over clientX, layerX, etc
-        let diffX = Math.floor(e.x - dimensions.x)
-        let diffY = Math.floor(e.y - dimensions.y)
-        const inputLeft = Math.floor(inputClientDimensions.x)
-        const inputTop = Math.floor(inputClientDimensions.y)
-
-        /*
-        const red = document.createElement("div");
-        //const calcTop = e.pageY + inputTop;
-        const calcTop = inputTop;
-        //const calcLeft = e.pageX - inputLeft;
-        const calcLeft = inputLeft;
-        red.style = `
-            background:red;
-            display: block;
-            height: ${inputClientDimensions.height}px;
-            width: ${inputClientDimensions.width}px;
-            position: absolute;
-            top: ${calcTop}px;
-            left: ${calcLeft}px;
-        `
-        document.body.appendChild(red)
-        */
-
-        DeviceInterface.showTooltip({
-            top: diffY,
-            left: diffX,
-            height: dimensions.height,
-            width: dimensions.width,
-            inputHeight: Math.floor(inputClientDimensions.height),
-            inputWidth: Math.floor(inputClientDimensions.width),
-            inputTop: inputTop,
-            inputLeft: inputLeft,
-            inputType: inputType
-        })
-        currentAttached = {form, input}
+        DeviceInterface.showTooltip(form, input, inputType, e)
         return
     }
     form.activeInput = input
@@ -200,6 +165,7 @@ class InterfacePrototype {
     }
 
     init () {
+        console.log(">>>>>>>> init")
         this.attachTooltip = attachTooltip.bind(this)
         const start = async () => {
             this.addDeviceListeners()
@@ -412,10 +378,6 @@ class AppleDeviceInterface extends InterfacePrototype {
             const innerNode = document.querySelector('ddg-autofill').shadowRoot.querySelector('.wrapper--data')
             await wkSend('setSize', {height: innerNode.clientHeight, width: innerNode.clientWidth})
         }
-        
-        this.showTooltip = async (details) => {
-            await wkSend('showAutofillParent', details)
-        }
 
         this.closeTooltip = async () => {
             await wkSend('closeAutofillParent', {})
@@ -533,6 +495,54 @@ class AppleDeviceInterface extends InterfacePrototype {
         const {inputType} = await wkSendAndWait('emailHandlerCheckAppSignedInStatus')
         return inputType
     }
+    
+    async showTooltip (form, input, inputType, e) {
+        if (e.type !== "pointerdown") {
+            return
+        }
+        let dimensions = getDaxBoundingBox(input)
+        const inputClientDimensions = input.getBoundingClientRect()
+        console.log(dimensions, e, input, inputClientDimensions)
+        // TODO check screenX/Y is correct over clientX, layerX, etc
+        let diffX = Math.floor(e.clientX - dimensions.x)
+        let diffY = Math.floor(e.clientY - dimensions.y)
+        const inputLeft = Math.floor(inputClientDimensions.x)
+        const inputTop = Math.floor(inputClientDimensions.y)
+
+        /*
+        const red = document.createElement("div");
+        //const calcTop = e.pageY + inputTop;
+        const calcTop = inputTop;
+        //const calcLeft = e.pageX - inputLeft;
+        const calcLeft = inputLeft;
+        red.style = `
+            background:red;
+            display: block;
+            height: ${inputClientDimensions.height}px;
+            width: ${inputClientDimensions.width}px;
+            position: absolute;
+            top: ${calcTop}px;
+            left: ${calcLeft}px;
+        `
+        document.body.appendChild(red)
+        */
+        // TODO top and left need to be the offset from the current click to the top/left of the input field
+        const details = {
+            inputTop: diffY,
+            inputLeft: diffX,
+            height: dimensions.height,
+            width: dimensions.width,
+            inputHeight: Math.floor(inputClientDimensions.height),
+            inputWidth: Math.floor(inputClientDimensions.width),
+            //inputTop: inputTop,
+            //inputLeft: inputLeft,
+            inputType: inputType
+        }
+        currentAttached = {form, input}
+        
+        console.log('show autofill parent', details)
+        await wkSend('showAutofillParent', details)
+    }
 }
 
 const DeviceInterface = (() => {
diff --git a/src/Form/input-classifiers.js b/src/Form/input-classifiers.js
index ffb3a50..83ebac7 100644
--- a/src/Form/input-classifiers.js
+++ b/src/Form/input-classifiers.js
@@ -196,8 +196,8 @@ const getInputMainType = (input) =>
  * @returns {SupportedSubTypes}
  */
 const getInputSubtype = (input) =>
-    input.getAttribute(ATTR_INPUT_TYPE)?.split('.')[1] ||
-    input.getAttribute(ATTR_INPUT_TYPE)?.split('.')[0] ||
+    input?.getAttribute(ATTR_INPUT_TYPE)?.split('.')[1] ||
+    input?.getAttribute(ATTR_INPUT_TYPE)?.split('.')[0] ||
     'unknown'
 
 /**
diff --git a/src/TopAutofill.html b/src/TopAutofill.html
index 6fac787..107cc01 100644
--- a/src/TopAutofill.html
+++ b/src/TopAutofill.html
@@ -2,8 +2,8 @@
 <head>
 <style>
     html, body {
-        background-color: transparent;
         margin: 0;
+        background-color: rgba(242, 240, 240, 0.9);
     }
 </style>
 </head>
diff --git a/src/UI/styles/autofill-tooltip-styles.js b/src/UI/styles/autofill-tooltip-styles.js
index 55626ef..43baaa6 100644
--- a/src/UI/styles/autofill-tooltip-styles.js
+++ b/src/UI/styles/autofill-tooltip-styles.js
@@ -31,17 +31,19 @@ module.exports = `
     -webkit-backdrop-filter: blur(40px);
     backdrop-filter: blur(40px);
 }
+.tooltip--data {
+    padding: 4px;
+    font-size: 13px;
+    line-height: 14px;
+    color: #222222;
+    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.32);
+}
 :not(.desktop) .tooltip--data {
     top: 100%;
     left: 100%;
     width: 315px;
-    padding: 4px;
     border: 0.5px solid rgba(0, 0, 0, 0.2);
     border-radius: 6px;
-    font-size: 13px;
-    line-height: 14px;
-    color: #222222;
-    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.32);
 }
 :not(.desktop) .tooltip--email {
     top: calc(100% + 6px);
diff --git a/src/topAutofill.js b/src/topAutofill.js
index 6c87547..5f86989 100644
--- a/src/topAutofill.js
+++ b/src/topAutofill.js
@@ -11,8 +11,11 @@ function setupFakeForm (inputType) {
     // TODO hey we're a PoC let's just fake the code to get it working
     let fakeForm = document.createElement('form')
     let fakeInput = makeField('email')
-
-    if (inputType === 'credentials') {
+    // TODO add support for identities
+    if (inputType === 'identities') {
+        inputType = 'emailNew'
+    }
+    if (inputType !== 'emailNew') {
         fakeInput = makeField('username')
         fakeForm.appendChild(fakeInput)
 
-- 
2.32.0 (Apple Git-132)

